services:
  db:
    image: fafnir-postgres-db
    build:
      context: ../../
      dockerfile: build/docker/postgres.Dockerfile
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 60s
    networks:
      - fafnir-network

  api-gateway:
    build:
      context: ../../
      dockerfile: build/docker/go-services.Dockerfile
      target: ${BUILD_TARGET:-development}
      args:
        SERVICE_NAME: api-gateway
    environment:
      - SERVICE_NAME=api-gateway
      - SERVICE_PORT=8080
    volumes:
      - ../../services/api-gateway:/app/services/api-gateway:cached
      - ../../services/shared:/app/services/shared:cached
    depends_on:
      user-service:
        condition: service_started
      security-service:
        condition: service_started
    ports:
      - "8080:8080"
    networks:
      - fafnir-network

  auth-service:
    build:
      context: ../../
      dockerfile: build/docker/go-services.Dockerfile
      target: ${BUILD_TARGET:-development}
      args:
        SERVICE_NAME: auth-service
    environment:
      - SERVICE_NAME=auth-service
      - SERVICE_PORT=8081
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - AUTH_DB=${AUTH_DB}
      - DB_HOST=${DB_HOST_DOCKER}
      - DB_PORT=${DB_PORT}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    volumes:
      - ../../services/auth-service:/app/services/auth-service:cached
      - ../../services/shared:/app/services/shared:cached
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8081:8081"
    networks:
      - fafnir-network

  security-service:
    build:
      context: ../../
      dockerfile: build/docker/go-services.Dockerfile
      target: ${BUILD_TARGET:-development}
      args:
        SERVICE_NAME: security-service
    environment:
      - SERVICE_NAME=security-service
      - SERVICE_PORT=8082
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - SECURITY_DB=${SECURITY_DB}
      - DB_HOST=${DB_HOST_DOCKER}
      - DB_PORT=${DB_PORT}
    volumes:
      - ../../services/security-service:/app/services/security-service:cached
      - ../../services/shared:/app/services/shared:cached
    depends_on:
      db:
        condition: service_healthy
    networks:
      - fafnir-network


  user-service:
    build:
      context: ../../
      dockerfile: build/docker/go-services.Dockerfile
      target: ${BUILD_TARGET:-development}
      args:
        SERVICE_NAME: user-service
    environment:
      - SERVICE_NAME=user-service
      - SERVICE_PORT=8083
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - USER_DB=${USER_DB}
      - DB_HOST=${DB_HOST_DOCKER}
      - DB_PORT=${DB_PORT}
    volumes:
      - ../../services/user-service:/app/services/user-service:cached
      - ../../services/shared:/app/services/shared:cached
    depends_on:
      db:
        condition: service_healthy
    networks:
      - fafnir-network

  web-app:
    build:
      context: ../../
      dockerfile: build/docker/frontend.Dockerfile
      target: ${BUILD_TARGET:-development}
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
    volumes:
      - ../../frontend:/app:cached
      - /app/node_modules
    depends_on:
      api-gateway:
        condition: service_started
    networks:
      - fafnir-network

volumes:
  pgdata:
    driver: local

networks:
  fafnir-network:
    driver: bridge