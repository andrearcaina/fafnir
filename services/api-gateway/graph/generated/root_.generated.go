// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fafnir/api-gateway/graph/model"
	"sync/atomic"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	HasPermissionResponse struct {
		HasPermission  func(childComplexity int) int
		PermissionCode func(childComplexity int) int
	}

	ProfileDataResponse struct {
		FirstName      func(childComplexity int) int
		LastName       func(childComplexity int) int
		PermissionCode func(childComplexity int) int
		UserID         func(childComplexity int) int
	}

	Query struct {
		CheckPermission  func(childComplexity int, request model.HasPermissionRequest) int
		GetProfileData   func(childComplexity int, userID string) int
		GetStockMetadata func(childComplexity int, symbol string) int
		Health           func(childComplexity int) int
	}

	StockData struct {
		Symbol func(childComplexity int) int
	}

	StockMetadataResponse struct {
		Code func(childComplexity int) int
		Data func(childComplexity int) int
	}
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(ctx context.Context, typeName, field string, childComplexity int, rawArgs map[string]any) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "HasPermissionResponse.hasPermission":
		if e.complexity.HasPermissionResponse.HasPermission == nil {
			break
		}

		return e.complexity.HasPermissionResponse.HasPermission(childComplexity), true

	case "HasPermissionResponse.permissionCode":
		if e.complexity.HasPermissionResponse.PermissionCode == nil {
			break
		}

		return e.complexity.HasPermissionResponse.PermissionCode(childComplexity), true

	case "ProfileDataResponse.firstName":
		if e.complexity.ProfileDataResponse.FirstName == nil {
			break
		}

		return e.complexity.ProfileDataResponse.FirstName(childComplexity), true

	case "ProfileDataResponse.lastName":
		if e.complexity.ProfileDataResponse.LastName == nil {
			break
		}

		return e.complexity.ProfileDataResponse.LastName(childComplexity), true

	case "ProfileDataResponse.permissionCode":
		if e.complexity.ProfileDataResponse.PermissionCode == nil {
			break
		}

		return e.complexity.ProfileDataResponse.PermissionCode(childComplexity), true

	case "ProfileDataResponse.userId":
		if e.complexity.ProfileDataResponse.UserID == nil {
			break
		}

		return e.complexity.ProfileDataResponse.UserID(childComplexity), true

	case "Query.checkPermission":
		if e.complexity.Query.CheckPermission == nil {
			break
		}

		args, err := ec.field_Query_checkPermission_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CheckPermission(childComplexity, args["request"].(model.HasPermissionRequest)), true

	case "Query.getProfileData":
		if e.complexity.Query.GetProfileData == nil {
			break
		}

		args, err := ec.field_Query_getProfileData_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetProfileData(childComplexity, args["userId"].(string)), true

	case "Query.getStockMetadata":
		if e.complexity.Query.GetStockMetadata == nil {
			break
		}

		args, err := ec.field_Query_getStockMetadata_args(ctx, rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetStockMetadata(childComplexity, args["symbol"].(string)), true

	case "Query.health":
		if e.complexity.Query.Health == nil {
			break
		}

		return e.complexity.Query.Health(childComplexity), true

	case "StockData.symbol":
		if e.complexity.StockData.Symbol == nil {
			break
		}

		return e.complexity.StockData.Symbol(childComplexity), true

	case "StockMetadataResponse.code":
		if e.complexity.StockMetadataResponse.Code == nil {
			break
		}

		return e.complexity.StockMetadataResponse.Code(childComplexity), true

	case "StockMetadataResponse.data":
		if e.complexity.StockMetadataResponse.Data == nil {
			break
		}

		return e.complexity.StockMetadataResponse.Data(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputHasPermissionRequest,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../schemas/base.graphqls", Input: `schema {
    query: Query
}

type Query
`, BuiltIn: false},
	{Name: "../schemas/health.graphqls", Input: `extend type Query {
    health: String!
}`, BuiltIn: false},
	{Name: "../schemas/security.graphqls", Input: `input HasPermissionRequest {
    userId: String!
    permission: String!
}

type HasPermissionResponse {
    hasPermission: Boolean!
    permissionCode: String! # grpc permission code (e.g., "PERMISSION_DENIED")
}

extend type Query {
    checkPermission(request: HasPermissionRequest!): HasPermissionResponse!
}`, BuiltIn: false},
	{Name: "../schemas/stock.graphqls", Input: `type StockMetadataResponse {
    code: Int!
    data: StockData!
}

type StockData {
    symbol: String!
}

extend type Query {
    getStockMetadata(symbol: String!): StockMetadataResponse!
}`, BuiltIn: false},
	{Name: "../schemas/user.graphqls", Input: `type ProfileDataResponse {
    userId: String!
    firstName: String!
    lastName: String!
    permissionCode: String! # grpc permission code
}

extend type Query {
    getProfileData(userId: String!): ProfileDataResponse!
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
