// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: user.sql

package generated

import (
	"context"

	"github.com/google/uuid"
)

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash
FROM users
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID           uuid.UUID `json:"id"`
	Email        string    `json:"email"`
	PasswordHash string    `json:"password_hash"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(&i.ID, &i.Email, &i.PasswordHash)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, email, password_hash
FROM users
WHERE id = $1
`

type GetUserByIdRow struct {
	ID           uuid.UUID `json:"id"`
	Email        string    `json:"email"`
	PasswordHash string    `json:"password_hash"`
}

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(&i.ID, &i.Email, &i.PasswordHash)
	return i, err
}

const insertUserWithID = `-- name: InsertUserWithID :one
INSERT INTO users (id, email, password_hash, created_at, updated_at)
VALUES ($1, $2, $3, NOW(), NOW())
RETURNING id, email
`

type InsertUserWithIDParams struct {
	ID           uuid.UUID `json:"id"`
	Email        string    `json:"email"`
	PasswordHash string    `json:"password_hash"`
}

type InsertUserWithIDRow struct {
	ID    uuid.UUID `json:"id"`
	Email string    `json:"email"`
}

// the query below is used for seeding
func (q *Queries) InsertUserWithID(ctx context.Context, arg InsertUserWithIDParams) (InsertUserWithIDRow, error) {
	row := q.db.QueryRow(ctx, insertUserWithID, arg.ID, arg.Email, arg.PasswordHash)
	var i InsertUserWithIDRow
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const registerUser = `-- name: RegisterUser :one
INSERT INTO users (id, email, password_hash, created_at, updated_at)
VALUES (gen_random_uuid(), $1, $2, NOW(), NOW())
RETURNING id, email
`

type RegisterUserParams struct {
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
}

type RegisterUserRow struct {
	ID    uuid.UUID `json:"id"`
	Email string    `json:"email"`
}

func (q *Queries) RegisterUser(ctx context.Context, arg RegisterUserParams) (RegisterUserRow, error) {
	row := q.db.QueryRow(ctx, registerUser, arg.Email, arg.PasswordHash)
	var i RegisterUserRow
	err := row.Scan(&i.ID, &i.Email)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE users
SET password_hash = $1, updated_at = NOW()
WHERE id = $2
`

type UpdatePasswordParams struct {
	PasswordHash string    `json:"password_hash"`
	ID           uuid.UUID `json:"id"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, updatePassword, arg.PasswordHash, arg.ID)
	return err
}
