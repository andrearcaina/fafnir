// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: stock_search.sql

package generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getStockMetadataBySymbol = `-- name: GetStockMetadataBySymbol :one
SELECT symbol, name, exchange, currency, type, sector FROM stock_metadata WHERE symbol = $1
`

func (q *Queries) GetStockMetadataBySymbol(ctx context.Context, symbol string) (StockMetadatum, error) {
	row := q.db.QueryRow(ctx, getStockMetadataBySymbol, symbol)
	var i StockMetadatum
	err := row.Scan(
		&i.Symbol,
		&i.Name,
		&i.Exchange,
		&i.Currency,
		&i.Type,
		&i.Sector,
	)
	return i, err
}

const getStockQuoteBySymbol = `-- name: GetStockQuoteBySymbol :one
SELECT symbol, last_price, price_change, price_change_pct, volume, market_cap, pe_ratio, dividend_yield, updated_at FROM stock_quote WHERE symbol = $1
`

func (q *Queries) GetStockQuoteBySymbol(ctx context.Context, symbol pgtype.Text) (StockQuote, error) {
	row := q.db.QueryRow(ctx, getStockQuoteBySymbol, symbol)
	var i StockQuote
	err := row.Scan(
		&i.Symbol,
		&i.LastPrice,
		&i.PriceChange,
		&i.PriceChangePct,
		&i.Volume,
		&i.MarketCap,
		&i.PeRatio,
		&i.DividendYield,
		&i.UpdatedAt,
	)
	return i, err
}

const searchStockMetadataByName = `-- name: SearchStockMetadataByName :many
SELECT symbol, name, exchange, currency, type, sector FROM stock_metadata WHERE name ILIKE '%' || $1 || '%' LIMIT $2 OFFSET $3
`

type SearchStockMetadataByNameParams struct {
	Column1 pgtype.Text `json:"column_1"`
	Limit   int32       `json:"limit"`
	Offset  int32       `json:"offset"`
}

func (q *Queries) SearchStockMetadataByName(ctx context.Context, arg SearchStockMetadataByNameParams) ([]StockMetadatum, error) {
	rows, err := q.db.Query(ctx, searchStockMetadataByName, arg.Column1, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StockMetadatum{}
	for rows.Next() {
		var i StockMetadatum
		if err := rows.Scan(
			&i.Symbol,
			&i.Name,
			&i.Exchange,
			&i.Currency,
			&i.Type,
			&i.Sector,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
